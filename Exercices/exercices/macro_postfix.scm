
(define-macro (postfix arg1 . args)
  (define (postfix->prefix stack args)
    (let ((pop1 (lambda (stack symbol)
                  (cons `(,symbol ,(car stack))
                        (cdr stack))))
          (pop2 (lambda (stack symbol)
                  (cons `(,symbol ,(cadr stack) ,(car stack))
                        (cddr stack))))
          (pop3 (lambda (stack symbol)
                  (cons `(,symbol ,(caddr stack) ,(cadr stack) ,(car stack))
                        (cdddr stack)))))
      (if (null? args)
        (if (= 1 (length stack))
          (car stack)
          (error "Invalid postfix expression"))
        (let* ((arg (car args))
               (newstack (case arg
                           ('+ (pop2 stack '+))
                           ('* (pop2 stack '*))
                           ('- (pop2 stack '-))
                           ('/ (pop2 stack '/))
                           ('not (pop1 stack 'not))
                           ('>= (pop2 stack '>=))
                           ('if (pop3 stack 'if))
                           (else (cons arg stack)))))
          (postfix->prefix newstack (cdr args))))))
  (trace postfix->prefix)
  (postfix->prefix '() (cons arg1 args)))


(define (test)
  (let ((x 5))
    (postfix 1 x + 3 * 2 /)))

(pp test)
(println "Result " (number->string (test)))
